<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="4" passed="3">
  <reporter-output>
  </reporter-output>
  <suite name="Gradle suite" duration-ms="6375" started-at="2018-09-07T07:54:04Z" finished-at="2018-09-07T07:54:10Z">
    <groups>
      <group name="Interface:Db">
        <method signature="ExampleDbTest.createUser()[pri:0, instance:examples.ExampleDbTest@401c5baf]" name="createUser" class="examples.ExampleDbTest"/>
      </group> <!-- Interface:Db -->
      <group name="Dump:Basic">
        <method signature="ExampleApiTest.authAndGet()[pri:0, instance:examples.ExampleApiTest@6f881b67]" name="authAndGet" class="examples.ExampleApiTest"/>
        <method signature="ExampleApiTest.getUsers()[pri:0, instance:examples.ExampleApiTest@6f881b67]" name="getUsers" class="examples.ExampleApiTest"/>
        <method signature="ExampleDbTest.createUser()[pri:0, instance:examples.ExampleDbTest@401c5baf]" name="createUser" class="examples.ExampleDbTest"/>
        <method signature="ExampleMobileTest.startRocket()[pri:0, instance:examples.ExampleMobileTest@6d86e8e0]" name="startRocket" class="examples.ExampleMobileTest"/>
      </group> <!-- Dump:Basic -->
      <group name="Mobile test">
        <method signature="ExampleMobileTest.startRocket()[pri:0, instance:examples.ExampleMobileTest@6d86e8e0]" name="startRocket" class="examples.ExampleMobileTest"/>
      </group> <!-- Mobile test -->
      <group name="Interface:RestAPI">
        <method signature="ExampleApiTest.authAndGet()[pri:0, instance:examples.ExampleApiTest@6f881b67]" name="authAndGet" class="examples.ExampleApiTest"/>
        <method signature="ExampleApiTest.getUsers()[pri:0, instance:examples.ExampleApiTest@6f881b67]" name="getUsers" class="examples.ExampleApiTest"/>
      </group> <!-- Interface:RestAPI -->
    </groups>
    <test name="Gradle test" duration-ms="6375" started-at="2018-09-07T07:54:04Z" finished-at="2018-09-07T07:54:10Z">
      <class name="examples.ExampleDbTest">
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:examples.ExampleDbTest@401c5baf]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="4" started-at="2018-09-07T10:54:08Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-09-07T10:54:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:examples.ExampleDbTest@401c5baf]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="0" started-at="2018-09-07T10:54:08Z" finished-at="2018-09-07T10:54:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:examples.ExampleDbTest@401c5baf]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-09-07T10:54:08Z" finished-at="2018-09-07T10:54:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void examples.ExampleDbTest.createUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="createUser()[pri:0, instance:examples.ExampleDbTest@401c5baf]" name="createUser" duration-ms="441" started-at="2018-09-07T10:54:08Z" description="Create user in database" finished-at="2018-09-07T10:54:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createUser -->
        <test-method status="PASS" signature="testInformation(org.testng.ITestResult)[pri:0, instance:examples.ExampleDbTest@401c5baf]" name="testInformation" is-config="true" duration-ms="1" started-at="2018-09-07T10:54:09Z" finished-at="2018-09-07T10:54:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=createUser status=SUCCESS method=ExampleDbTest.createUser()[pri:0, instance:examples.ExampleDbTest@401c5baf] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInformation -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:examples.ExampleDbTest@401c5baf]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-09-07T10:54:09Z" finished-at="2018-09-07T10:54:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void examples.ExampleDbTest.createUser()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:examples.ExampleDbTest@401c5baf]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2018-09-07T10:54:09Z" finished-at="2018-09-07T10:54:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- examples.ExampleDbTest -->
      <class name="examples.ExampleMobileTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:examples.ExampleMobileTest@6d86e8e0]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="1" started-at="2018-09-07T10:54:09Z" finished-at="2018-09-07T10:54:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:examples.ExampleMobileTest@6d86e8e0]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="79" started-at="2018-09-07T10:54:09Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-09-07T10:54:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:examples.ExampleMobileTest@6d86e8e0]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-09-07T10:54:09Z" finished-at="2018-09-07T10:54:09Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void examples.ExampleMobileTest.startRocket() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="FAIL" signature="startRocket()[pri:0, instance:examples.ExampleMobileTest@6d86e8e0]" name="startRocket" duration-ms="938" started-at="2018-09-07T10:54:09Z" description="Click on power button and check text field" finished-at="2018-09-07T10:54:10Z">
          <exception class="org.openqa.selenium.WebDriverException">
            <message>
              <![CDATA[Connection refused (Connection refused)
Build info: version: '3.12.0', revision: '7c6e0b3', time: '2018-05-08T14:04:26.12Z'
System info: host: 'ite502.lv.remit.se', ip: 'fe80:0:0:0:143c:5e9d:48c9:4ec5%en0', os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '10.13.5', java.version: '1.8.0_171'
Driver info: driver.version: MobileDriver]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.WebDriverException: Connection refused (Connection refused)
Build info: version: '3.12.0', revision: '7c6e0b3', time: '2018-05-08T14:04:26.12Z'
System info: host: 'ite502.lv.remit.se', ip: 'fe80:0:0:0:143c:5e9d:48c9:4ec5%en0', os.name: 'Mac OS X', os.arch: 'x86_64', os.version: '10.13.5', java.version: '1.8.0_171'
Driver info: driver.version: MobileDriver
	at io.appium.java_client.remote.AppiumCommandExecutor.lambda$2(AppiumCommandExecutor.java:243)
	at java.util.Optional.orElseGet(Optional.java:267)
	at io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:242)
	at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:543)
	at io.appium.java_client.DefaultGenericMobileDriver.execute(DefaultGenericMobileDriver.java:42)
	at io.appium.java_client.AppiumDriver.execute(AppiumDriver.java:1)
	at io.appium.java_client.ios.IOSDriver.execute(IOSDriver.java:1)
	at org.openqa.selenium.remote.RemoteWebDriver.startSession(RemoteWebDriver.java:207)
	at org.openqa.selenium.remote.RemoteWebDriver.<init>(RemoteWebDriver.java:130)
	at io.appium.java_client.DefaultGenericMobileDriver.<init>(DefaultGenericMobileDriver.java:38)
	at io.appium.java_client.AppiumDriver.<init>(AppiumDriver.java:84)
	at io.appium.java_client.AppiumDriver.<init>(AppiumDriver.java:94)
	at io.appium.java_client.ios.IOSDriver.<init>(IOSDriver.java:95)
	at core.modules.mobile.models.MobileDriver.driver(MobileDriver.java:34)
	at core.service.MobileTest.getMobile(MobileTest.java:29)
	at examples.ExampleMobileTest.startRocket(ExampleMobileTest.java:11)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:209)
	at org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:175)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:221)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:657)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:869)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1193)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:126)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
	at com.sun.proxy.$Proxy1.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:119)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:146)
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:128)
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.net.ConnectException: Connection refused (Connection refused)
	at java.net.PlainSocketImpl.socketConnect(Native Method)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at okhttp3.internal.platform.Platform.connectSocket(Platform.java:125)
	at okhttp3.internal.connection.RealConnection.connectSocket(RealConnection.java:238)
	at okhttp3.internal.connection.RealConnection.connect(RealConnection.java:158)
	at okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:256)
	at okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:134)
	at okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:113)
	at okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)
	at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)
	at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)
	at okhttp3.internal.cache.CacheInterceptor.intercept(CacheInterceptor.java:93)
	at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)
	at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)
	at okhttp3.internal.http.BridgeInterceptor.intercept(BridgeInterceptor.java:93)
	at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)
	at okhttp3.internal.http.RetryAndFollowUpInterceptor.intercept(RetryAndFollowUpInterceptor.java:125)
	at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)
	at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)
	at okhttp3.RealCall.getResponseWithInterceptorChain(RealCall.java:200)
	at okhttp3.RealCall.execute(RealCall.java:77)
	at org.openqa.selenium.remote.internal.OkHttpClient.execute(OkHttpClient.java:105)
	at org.openqa.selenium.remote.ProtocolHandshake.createSession(ProtocolHandshake.java:101)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at io.appium.java_client.remote.AppiumCommandExecutor$1.createSession(AppiumCommandExecutor.java:185)
	at io.appium.java_client.remote.AppiumCommandExecutor.createSession(AppiumCommandExecutor.java:209)
	at io.appium.java_client.remote.AppiumCommandExecutor.execute(AppiumCommandExecutor.java:231)
	... 66 more
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.WebDriverException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startRocket -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:examples.ExampleMobileTest@6d86e8e0]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-09-07T10:54:10Z" finished-at="2018-09-07T10:54:10Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void examples.ExampleMobileTest.startRocket() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="FAIL" signature="tearDown()[pri:0, instance:examples.ExampleMobileTest@6d86e8e0]" name="tearDown" is-config="true" duration-ms="1" started-at="2018-09-07T10:54:10Z" finished-at="2018-09-07T10:54:10Z">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
	at core.modules.mobile.models.MobileDriver.quit(MobileDriver.java:40)
	at core.service.MobileTest.tearDown(MobileTest.java:21)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:108)
	at org.testng.internal.Invoker.invokeConfigurationMethod(Invoker.java:523)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:224)
	at org.testng.internal.Invoker.invokeConfigurations(Invoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeAfterClassMethods(TestMethodWorker.java:212)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:744)
	at org.testng.TestRunner.run(TestRunner.java:602)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:380)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:375)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1301)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1226)
	at org.testng.TestNG.runSuites(TestNG.java:1144)
	at org.testng.TestNG.run(TestNG.java:1115)
	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.runTests(TestNGTestClassProcessor.java:129)
	at org.gradle.api.internal.tasks.testing.testng.TestNGTestClassProcessor.stop(TestNGTestClassProcessor.java:88)
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.stop(SuiteTestClassProcessor.java:61)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)
	at com.sun.proxy.$Proxy1.stop(Unknown Source)
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.stop(TestWorker.java:119)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:146)
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:128)
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55)
	at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:examples.ExampleMobileTest@6d86e8e0]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2018-09-07T10:54:10Z" finished-at="2018-09-07T10:54:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- examples.ExampleMobileTest -->
      <class name="examples.ExampleApiTest">
        <test-method status="PASS" signature="springTestContextBeforeTestClass()[pri:0, instance:examples.ExampleApiTest@6f881b67]" name="springTestContextBeforeTestClass" is-config="true" duration-ms="15" started-at="2018-09-07T10:54:04Z" finished-at="2018-09-07T10:54:04Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestClass -->
        <test-method status="PASS" signature="springTestContextPrepareTestInstance()[pri:0, instance:examples.ExampleApiTest@6f881b67]" name="springTestContextPrepareTestInstance" is-config="true" duration-ms="2958" started-at="2018-09-07T10:54:04Z" depends-on-methods="org.springframework.test.context.testng.AbstractTestNGSpringContextTests.springTestContextBeforeTestClass" finished-at="2018-09-07T10:54:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextPrepareTestInstance -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:examples.ExampleApiTest@6f881b67]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="3" started-at="2018-09-07T10:54:07Z" finished-at="2018-09-07T10:54:07Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void examples.ExampleApiTest.authAndGet()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="authAndGet()[pri:0, instance:examples.ExampleApiTest@6f881b67]" name="authAndGet" duration-ms="1454" started-at="2018-09-07T10:54:07Z" description="Check POST https://reqres.in/api/signIn and GET https://reqres.in/api/users" finished-at="2018-09-07T10:54:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- authAndGet -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:examples.ExampleApiTest@6f881b67]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="1" started-at="2018-09-07T10:54:08Z" finished-at="2018-09-07T10:54:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void examples.ExampleApiTest.authAndGet()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="testInformation(org.testng.ITestResult)[pri:0, instance:examples.ExampleApiTest@6f881b67]" name="testInformation" is-config="true" duration-ms="0" started-at="2018-09-07T10:54:08Z" finished-at="2018-09-07T10:54:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=authAndGet status=SUCCESS method=ExampleApiTest.authAndGet()[pri:0, instance:examples.ExampleApiTest@6f881b67] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInformation -->
        <test-method status="PASS" signature="getUsers()[pri:0, instance:examples.ExampleApiTest@6f881b67]" name="getUsers" duration-ms="419" started-at="2018-09-07T10:54:08Z" description="Check GET https://reqres.in/api/users" finished-at="2018-09-07T10:54:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getUsers -->
        <test-method status="PASS" signature="springTestContextBeforeTestMethod(java.lang.reflect.Method)[pri:0, instance:examples.ExampleApiTest@6f881b67]" name="springTestContextBeforeTestMethod" is-config="true" duration-ms="0" started-at="2018-09-07T10:54:08Z" finished-at="2018-09-07T10:54:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void examples.ExampleApiTest.getUsers()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextBeforeTestMethod -->
        <test-method status="PASS" signature="springTestContextAfterTestMethod(java.lang.reflect.Method)[pri:0, instance:examples.ExampleApiTest@6f881b67]" name="springTestContextAfterTestMethod" is-config="true" duration-ms="0" started-at="2018-09-07T10:54:08Z" finished-at="2018-09-07T10:54:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void examples.ExampleApiTest.getUsers()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestMethod -->
        <test-method status="PASS" signature="testInformation(org.testng.ITestResult)[pri:0, instance:examples.ExampleApiTest@6f881b67]" name="testInformation" is-config="true" duration-ms="0" started-at="2018-09-07T10:54:08Z" finished-at="2018-09-07T10:54:08Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=getUsers status=SUCCESS method=ExampleApiTest.getUsers()[pri:0, instance:examples.ExampleApiTest@6f881b67] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInformation -->
        <test-method status="PASS" signature="springTestContextAfterTestClass()[pri:0, instance:examples.ExampleApiTest@6f881b67]" name="springTestContextAfterTestClass" is-config="true" duration-ms="0" started-at="2018-09-07T10:54:08Z" finished-at="2018-09-07T10:54:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- springTestContextAfterTestClass -->
      </class> <!-- examples.ExampleApiTest -->
    </test> <!-- Gradle test -->
  </suite> <!-- Gradle suite -->
</testng-results>
